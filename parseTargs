#! /usr/bin/env python

import cherrypy
import webbrowser
import os
import simplejson
import sqlite3
import urllib
 
from scripts.dbWriter import dbWriter
from scripts.summary import summary
from scripts.histograms import histograms

class ParseTargets():

    @cherrypy.expose
    def index(self):
        
   #     template = open(os.path.join(os.path.abspath("."),'html/page_template.html'))
   #     content = open(os.path.join(os.path.abspath("."),'html/parseTargets.html'))
   #     return template.read().format(content.read())
      return open('html/parseTargets.html').read()

    @cherrypy.expose
    def download(self):
 
      try:
        urllib.urlretrieve('http://targetdb.sbkb.org/target_files/targetsV2.xml',os.path.join(os.path.abspath("."),'workspace/targetsV2.xml'))    
   
        return "1"
      except: return "0"
 

    @cherrypy.expose
    def dbExists(self):

      db_path=os.path.join(os.path.abspath("."),'workspace/parseTargs.db')   
      if os.path.isfile(db_path):
          return "1"
      else:
          return "0"


    @cherrypy.expose
    def start(self):

      db_path=os.path.join(os.path.abspath("."),'workspace/parseTargs.db')   
      if os.path.isfile(db_path):
           os.remove(db_path)
      self.dbw=dbWriter('workspace/targetsV2.xml',db_path)


    @cherrypy.expose
    def getSummary(self):

       cherrypy.response.headers['Content-Type'] = 'text/html'
       return summary('workspace/parseTargs.db')
     

    @cherrypy.expose
    def getHistogramData(self):
      db_path=os.path.join(os.path.abspath("."),'workspace/parseTargs.db')   
      if os.path.isfile(db_path):
         histograms(db_path)
       

    @cherrypy.expose
    def getStatus(self):
    
      db_path=os.path.join(os.path.abspath("."),'workspace/parseTargs.db')   
      if os.path.isfile(db_path):
        db = sqlite3.connect(db_path)        
        dbCursor = db.cursor()           
  
        status = dbCursor.execute("select status from Meta").fetchone()[0]
        datestamp = dbCursor.execute("select datestamp from Meta").fetchone()[0]
        parsed = dbCursor.execute("select records_parsed from Meta").fetchone()[0]
     
        sc= dbCursor.execute("select count(*) from parseTargs where isSoluble=1 and isTM=0").fetchone()[0] 
           # sc= soluble/cytoplasmic total etc.
        sm= dbCursor.execute("select count(*) from parseTargs where isSoluble=1 and isTM=1").fetchone()[0]
        ic= dbCursor.execute("select count(*) from parseTargs where isSoluble=0 and isTM=0").fetchone()[0]
        im= dbCursor.execute("select count(*) from parseTargs where isSoluble=0 and isTM=1").fetchone()[0]
   
        cherrypy.response.headers['Content-Type'] = 'application/json'
        return simplejson.dumps({  'status': status, 
  				 'datestamp':datestamp, 
   				 'records_parsed': parsed, 
  				 'sctot':sc,
  				 'smtot': sm,
  				 'ictot': ic,
 				 'imtot': im })


    
config = {'/js':
                {'tools.staticdir.on': True,
                 'tools.staticdir.dir': os.path.join(os.path.abspath("."), u"js")
                },
         '/img':
                {'tools.staticdir.on': True,
                 'tools.staticdir.dir': os.path.join(os.path.abspath("."), u"img")
                },
         '/css':
                {'tools.staticdir.on': True,
                 'tools.staticdir.dir': os.path.join(os.path.abspath("."), u"css")
                },
         '/www':
                {'tools.staticdir.on': True,
                 'tools.staticdir.dir': os.path.join(os.path.abspath("."), u"www")
                },
     
        }

def open_page():
    webbrowser.open("http://127.0.0.1:8080/parseTargs")

#cherrypy.engine.subscribe('start', open_page)
cherrypy.tree.mount(ParseTargets(), '/parseTargs',config=config)

cherrypy.engine.start()
